// SPDX-FileCopyrightText: 2024 Cesanta Software Limited
// SPDX-License-Identifier: GPL-2.0-only or commercial
// Generated by Mongoose Wizard, https://mongoose.ws/wizard/

#ifndef MONGOOSE_GLUE_H
#define MONGOOSE_GLUE_H

#ifdef __cplusplus
extern "C" {
#endif

#include "mongoose.h"

#define WIZARD_ENABLE_HTTP 1
#define WIZARD_ENABLE_HTTPS 1
#define WIZARD_ENABLE_HTTP_UI 1
#define WIZARD_ENABLE_HTTP_UI_LOGIN 1

#define WIZARD_ENABLE_MQTT 1
//#define WIZARD_MQTT_URL "mqtt://10.14.16.29:1991"

#define WIZARD_ENABLE_SNTP 0  // Enable time sync.
#define WIZARD_SNTP_TYPE 0    // 0: default Google, 1: DHCP, 2: custom
#define WIZARD_SNTP_URL "udp://time.google.com:123"  // Custom SNTP server URL
#define WIZARD_SNTP_INTERVAL_SECONDS 3600            // Frequency of SNTP syncs

#define WIZARD_DNS_TYPE 0  // 0: default Google, 1: DHCP, 2: custom
#define WIZARD_DNS_URL "udp://8.8.8.8:53"  // Custom DNS server URL

#define WIZARD_ENABLE_MODBUS 0
#define WIZARD_MODBUS_PORT 502

#ifndef WIZARD_REBOOT_TIMEOUT_MS
#define WIZARD_REBOOT_TIMEOUT_MS 500

#define  ws_listen_on  "ws://localhost:8000"
#define  s_web_root  "."
#endif

void mongoose_init(void);    // Initialise Mongoose
void mongoose_poll(void);    // Poll Mongoose
extern struct mg_mgr g_mgr;  // Mongoose event manager
void glue_init(void);        // Called at the end of mongoose_init()
extern char topicBff[3][64];
#define run_mongoose() \
  do {                 \
    mongoose_init();   \
    for (;;) {         \
      mongoose_poll(); \
    }                  \
  } while (0)

#if WIZARD_ENABLE_MQTT

typedef enum {
	SELECT_INFO_TOPIC,
	SELECT_REPORT_TOPIC,
	SELECT_COMPLETE_TOPIC,
}SelectTopic;

struct INTERNET_CONFIG {
	uint32_t ip, mask, gw;           // IP address, mask, default gateway
	char *mqttBroker ;				 // MQTT broker
	char *mqttUser	 ;				 // MQTT User
	char *mqttPass	 ;				 // MQTT password
	char *s_sub_handle  ;			 // Subscribe topic handle
	char *s_sub_run     ;			 // Subscribe topic run
	char *s_sub_admin   ;			 // Subscribe topic admin
	char *s_pub_info    ; 			 // publish topic info
	char *s_pub_report  ;			 // Publish topic report
	char *s_pub_complete;			 // Publish topic complete mission
	char *no			;			 // Serial number of Shuttle
};
extern uint8_t *tcpConnectState;
void mqtt_publish(struct mg_str message, SelectTopic selectTopic);
void ws_transmit_timer(void *arg);
void glue_lock_init(void);  // Initialise global Mongoose mutex
void glue_lock(void);       // Lock global Mongoose mutex
void glue_unlock(void);     // Unlock global Mongoose mutex
#else
#define glue_lock_init()
#define glue_lock()
#define glue_unlock()
#endif

// Increment device change state counter - trigger UI refresh
void glue_update_state(void);

// Firmware Glue



extern struct mg_connection *g_mqtt_conn;  // MQTT client connection

void glue_mqtt_tls_init(struct mg_connection *c);
struct mg_connection *glue_mqtt_connect( struct mg_mgr *, void (*ev_handler)(struct mg_connection *, int, void *));
void glue_mqtt_on_connect(struct mg_connection *c, int code);
void glue_mqtt_on_message(struct mg_connection *c, struct mg_str topic,
                          struct mg_str data);
void glue_mqtt_on_cmd(struct mg_connection *c, struct mg_mqtt_message *mm);
void glue_websocket_on_message(struct mg_connection *c,struct mg_ws_message *wsm);

void websocketCallback(struct mg_connection *con, struct mg_ws_message *wsm ) ;
void mqttCallback(struct mg_connection *con, struct mg_mqtt_message *mqttm );
void httpCallback(struct mg_connection *con, struct mg_str httpm );
int    glue_authenticate(const char *user, const char *pass);

bool glue_check_reboot(void);
void glue_start_reboot(void);
void *glue_ota_begin_firmware_update(char *file_name, size_t total_size);
bool glue_ota_end_firmware_update(void *context);
bool glue_ota_write_firmware_update(void *context, void *buf, size_t len);
void *glue_file_open_file_upload(char *file_name, size_t total_size);
bool glue_file_close_file_upload(void *context);
bool glue_file_write_file_upload(void *context, void *buf, size_t len);
size_t glue_graph_get_graph1(uint32_t from, uint32_t to,
                              uint32_t *x_values, double *y_values, size_t len);
struct state {
  int speed;
  int temperature;
  int humidity;
  int uptime;
  char version[20];
  bool online;
  bool lights;
  int level;
};
void glue_get_state(struct state *);
void glue_set_state(struct state *);

struct leds {
  bool led1;
  bool led2;
  bool led3;
};
void glue_get_leds(struct leds *);
void glue_set_leds(struct leds *);

struct settings {
  char string_val[40];
  int log_level;
  double double_val;
  int int_val;
  bool bool_val;
};
void glue_get_settings(struct settings *);
void glue_set_settings(struct settings *);

struct security {
  char admin_password[40];
  char user_password[40];
};
void glue_get_security(struct security *);
void glue_set_security(struct security *);


#ifdef __cplusplus
}
#endif
#endif  // MONGOOSE_GLUE_H
